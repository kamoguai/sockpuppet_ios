# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

# api_key = app_store_connect_api_key(
#   key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
#   issuer_id: ENV['APP_STORE_CONNECT_API_ISSUER_ID'],
#   key_filepath: ENV['API_KEY_PATH'],
# )

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    # increment_build_number(xcodeproj: "SSGaming.xcodeproj")
    build_app(workspace: "SSGaming.xcworkspace", scheme: "SSGaming")
    # upload_to_testflight
  end

  lane :build_and_sign do
    # 同步證書和描述文件
      match(
        type: "appstore", # 可選：development, adhoc, enterprise, appstore
        readonly: true
      )

      # 使用自動管理簽名
      build_app(
        scheme: "SSGaming",               # 替換為你的scheme名稱
        export_method: "app-store",            # 這裡可以根據需要選擇 app-store, ad-hoc, enterprise, development
        export_xcargs: "-allowProvisioningUpdates", # 允許Xcode自動更新描述文件
        xcargs: "-allowProvisioningUpdates" # 確保在構建過程中使用這個選項
      )
  end

  lane :tests do
    run_tests(workspace: "SSGaming.xcworkspace",
            devices: ["iPhone 8 (15.0)"],
            scheme: "SSGaming")
  end

  # desc "dowload certificates from the git"
  # lane :syncCertificates do
  #   match(
  #      api_key: api_key,
  #      type: "development",
  #      git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]),
  #      keychain_password: ENV["MATCH_PASSWORD"]
  #      )
  # end

  # desc "Connect App Store connect by API"
  # lane :connectByAPI do
  #   app_store_connect_api_key(
  #     key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
  #     issuer_id: ENV['APP_STORE_CONNECT_API_ISSUER_ID'],
  #     key_filepath: ENV['API_KEY_PATH'],
  #   )
  # end

  desc "Build and archive APP"
  lane :archive do
    # update_code_signing_settings(
    #   path: "#{ENV['SCHEME']}.xcodeproj",
    #   team_id:ENV["DEVELOPER_PORTAL_TEAM_ID"],
    #   targets: ENV["SCHEME"],
    #   code_sign_identity: ENV["APP_DISTRIBUTION"],
    #   profile_name: "#{profileName}",
    #   bundle_identifier: ENV["APP_IDENTIFIER"]
    # )

    build_app(
      workspace: "#{ENV['SCHEME']}.xcworkspace",
      scheme: ENV["SCHEME"],
      export_method: "development",
      clean: true,
      output_directory: './build',
      output_name: "#{fileName}",
      # xcargs: 'DEBUG_INFORMATION_FORMAT=dwarf-with-dsym'

    )
  end

  private_lane :profileName do
    "#{ENV['BUNDLE_ID']} AppStore"
  end
  private_lane :fileName do
    versionNumber = get_version_number(target: ENV["SCHEME"])
    "#{ENV["SCHEME"]}_#{versionNumber}.ipa"
  end

  desc "response echo"
  lane :hello do
    puts "echo echo"
  end

  desc "Update Bundle Name and App Name"
  private_lane :update_names do |options|
    puts "@@@@ enter update name function @@@@"
    plist_path = "/Users/kamoguai/Desktop/馬甲文件/sockpuppet-ios/SSGaming/Info.plist"
    proj_path = "/Users/kamoguai/Desktop/馬甲文件/sockpuppet-ios/SSGaming.xcodeproj"
    bundle_id = get_info_plist_value(
      path: plist_path,
      key: "BundleID"
    )
    puts "bundle_id => #{bundle_id}"
    # bundle_name = options[:bundle_name]
    app_name = options[:app_name]
    bundle_identifier = options[:bundle_identifier]
    host_name = options[:host_name]
    puts "inputField app_name : #{app_name}"
    puts "inputField bundle_identifier : #{bundle_identifier}"
    puts "inputField host_name : #{bundle_identifier}"
    # 使用PlistBuddy更新Info.plist
    # sh "/usr/libexec/PlistBuddy -c \"Set :CFBundleName #{bundle_name}\" #{plist_path}"
    sh "/usr/libexec/PlistBuddy -c \"Set :CFBundleDisplayName #{app_name}\" #{plist_path}"
    sh "/usr/libexec/PlistBuddy -c \"Set :HostName #{host_name}\" #{plist_path}"
    # sh "/usr/libexec/PlistBuddy -c \"Set :CFBundleIdentifier #{bundle_identifier}\" #{plist_path}"
    # 使用 sed 修改 project.pbxproj 文件中的 Bundle Identifier
    sh "sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = #{bundle_id};/PRODUCT_BUNDLE_IDENTIFIER = #{bundle_identifier};/' #{proj_path}/project.pbxproj"
    sh "/usr/libexec/PlistBuddy -c \"Set :BundleID #{bundle_identifier}\" #{plist_path}"
    # 打印修改后的 Bundle Identifier 确认
    sh "grep -A 1 'PRODUCT_BUNDLE_IDENTIFIER' #{proj_path}/project.pbxproj"#{proj_path}/project.pbxproj
  end

  desc "Deploy to TestFlight with updated names"
  lane :gama do |options|
    # 更新名稱
    update_names(bundle_name: options[:bundle_name], app_name: options[:app_name], bundle_identifier: options[:bundle_identifier], host_name: options[:host_name])
  end

  # =======================================
  # ======= Download Certificates =========
  # =======================================

  desc "Download Development Certificates And Profiles"
  lane :download_development_certificates do
    match_for_all(account_type: "development", readonly: true)
  end

  desc "Download Distribution Certificates And Profiles"
  #readonly 為 false 會建立新的憑證，true 則不會
  lane :download_distribution_certificates do
    match_for_all(account_type: "appstore", readonly: true)
  end

  private_lane :match_for_all do |options|
    account_type = options[:account_type]
    readonly = options[:readonly]
    # force_for_new_devices => 有新裝置時會重新生成 provisioning profile
    match(type: account_type,
    force_for_new_devices: true,
    readonly: readonly)
  end
  # =======================================
  # ======= Build ipa to local file =======
  # =======================================
   desc "build dev"
   lane :dev_beta do
  	# 透過 match 同步憑證
    	download_development_certificates
  	# 透過 gym 打包 ipa
   	build(build_type: 'development', ipa_name: 'DEV')
    	# 在 macOS 通知欄發送通知
   	notification(subtitle: "打包完成", message: "已經打包在本地了")
   end

   desc "release to app-store"
   lane :release_beta do
  	download_distribution_certificates
  	build(build_type: 'adhoc', ipa_name: 'Release')
   end

   private_lane :build do |options|
  	build_number = Time.new.strftime("%y%m%d%H%M")
  	build_type = options[:build_type]
  	ipa_name = ENV["SCHEME"] + "-" + options[:ipa_name]
  	configure = build_type == 'development' ? 'Debug': 'Release'

  	puts "app build 🏄🏄🏄"
  	puts "build_type: " + build_type
  	puts "build_number: " + build_number
  	puts "ipa_name: " + ipa_name

  	increment_build_number(build_number: build_number)
  	gym(clean: true,
  		configuration: configure,
  		scheme: ENV["SCHEME"],
  		export_method: build_type,
  		output_directory: ENV["EXPORT_OUTPUT_DIRECTORY"],#ipa輸出位置
  		output_name: ipa_name,#ipa名稱
          silent:true#隱藏沒有必要的資訊
          )

   end

   desc "replace appIcon & splash icon "
   lane :replace_icons do |options|
     app_icon_dir = options[:app_icon] || "../../appIcon"
     launch_image_dir = options[:launch_image] || "../../launchImage"

     # 找到目錄中的第一個 PNG 文件
     app_icon_path = Dir.glob(File.join(app_icon_dir, "*.png")).first
     if app_icon_path.nil?
       UI.user_error!("No app icon found in #{app_icon_dir}")
     end

     appicon(
       appicon_image_file: app_icon_path,
       appicon_devices: [:ipad, :iphone, :ios_marketing, :watch, :watch_marketing],
       appicon_path: "/Users/kamoguai/Desktop/馬甲文件/sockpuppet-ios/SSGaming/Assets.xcassets"
     )

      # 找到目錄中的第一個 PNG 文件
      launch_image_path = Dir.glob(File.join(launch_image_dir, "*.png")).first
      puts " --- launch_image_path first file : #{launch_image_path} --- "
      if launch_image_path.nil?
        UI.user_error!("No app launch image found in #{launch_image_dir}")
      end

      launch_image_sets = {
       "LaunchImage" => {
         "images" => [
           {
             "idiom" => "universal",
             "filename" => File.basename(launch_image_path),
             "scale" => "1x"
           },
           {
             "idiom" => "universal",
             "scale" => "2x"
           },
           {
             "idiom" => "universal",
             "scale" => "3x"
           }
           # 添加其他必要的尺寸和配置
         ],
         "info" => {
           "version" => 1,
           "author" => "xcode"
         }
       }
      }

      launch_image_sets.each do |name, data|
        puts "for each launch_image_path file #{name}"
        # 將 launch_image_path 文件複製到對應的目錄
        target_launch_image_dir = "/Users/kamoguai/Desktop/馬甲文件/sockpuppet-ios/SSGaming/Assets.xcassets/#{name}.imageset/"
        FileUtils.cp(launch_image_path, target_launch_image_dir)
        File.open("/Users/kamoguai/Desktop/馬甲文件/sockpuppet-ios/SSGaming/Assets.xcassets/#{name}.imageset/Contents.json", "w") do |f|
          f.write(JSON.pretty_generate(data))
        end
      end
   end

   desc "Release Testing: Build and distribute the app for testing"
   lane :release_testing do
    puts "@@@ fastlane action release_testing is start @@@"
    # 确保使用 Ad Hoc 配置文件
    match(
      type: "adhoc",
      app_identifier: "com.webapp.testBuild",
      readonly: false,  # 确保 Match 可以创建新证书和配置文件
      keychain_name: "login.keychain",
      keychain_password: "0000"
    )

    # 构建和打包应用
    gym(
      clean: true,
      scheme: "SSGaming",
      configuration: "Release",
      export_method: "ad-hoc",
      output_directory: "./build",
      output_name: "build.ipa",
      include_bitcode: false,
      include_symbols: false
    )

    # 运行测试
    # scan(
    #   scheme: "SSGaming",
    #   device: "iPhone 11",
    #   configuration: "Release",
    #   clean: true
    # )
  end
end
